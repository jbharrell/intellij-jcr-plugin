apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    maven {
        url "http://repo.adobe.com/nexus/content/groups/public/"
    }
    maven {
        url "http://repo.briangoins.com/public/"
    }
}

sourceCompatibility = 1.6
version = '1.0'

dependencies {

    compile "com.day.cq:cq-commons:5.5.0"
    compile "com.day.jcr.vault:com.day.jcr.vault:2.4.18"

    compile "commons-collections:commons-collections:3.2.1"
    compile "javax.jcr:jcr:2.0"
    compile "org.apache.jackrabbit:jackrabbit-jcr-commons:2.2.4"
    compile "org.apache.jackrabbit:jackrabbit-spi:2.2.4"
    compile "org.apache.jackrabbit:jackrabbit-webdav:2.2.4"
    compile "org.apache.jackrabbit:jackrabbit-jcr2dav:2.2.4"
    compile "org.apache.jackrabbit:jackrabbit-jcr2spi:2.2.4"
    compile "org.apache.jackrabbit:jackrabbit-spi-commons:2.2.4"
    compile "org.apache.velocity:velocity:1.7"
    compile "org.slf4j:slf4j-log4j12:1.5.11"
    compile "org.slf4j:slf4j-api:1.5.11"
    compile "log4j:log4j:1.2.14"

    compile "com.intellij:annotations:13.0"
    compile "com.intellij:extensions:13.0"
    compile "com.intellij:idea:13.0"
    compile "com.intellij:jdom:13.0"
    compile "com.intellij:openapi:13.0"
    compile "com.intellij:util:13.0"

}

idea.project.ipr {
    withXml { provider ->
        def componentNodeList = provider.node.component
        def compilerConfigurationNode = componentNodeList.find { it.@name == 'CompilerConfiguration' }

        compilerConfigurationNode.wildcardResourcePatterns[0].replaceNode {
            wildcardResourcePatterns() {
                entry(name: "!?*.groovy")
                entry(name: "!?*.java")
                entry(name: "?*.properties")
                entry(name: "?*.xml")
                entry(name: "?*.gif")
                entry(name: "?*.png")
                entry(name: "?*.jpeg")
                entry(name: "?*.jpg")
                entry(name: "?*.html")
                entry(name: "?*.dtd")
                entry(name: "?*.tld")
                entry(name: "?*.ftl")
            }
        }

        compilerConfigurationNode.annotationProcessing[0].replaceNode {
            annotationProcessing() {
                profile(default: "true", name: "Default", enabled: "false") {
                    processorPath(useClasspath: "true")
                }
            }
        }

        def vcsDirectoryMappingsNode = componentNodeList.find { it.@name == 'VcsDirectoryMappings' }
        vcsDirectoryMappingsNode.mapping.@directory = "\$PROJECT_DIR\$/.."
        vcsDirectoryMappingsNode.mapping.@vcs = "Git"
    }
}

jar {
    from ('META-INF/plugin.xml', { into 'META-INF/' })
}
